@page "/"
@namespace PiBulletinBoard.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>PiBulletinBoard</title>
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="PiBulletinBoard.styles.css" rel="stylesheet" />
</head>

<body>
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>

    <script src="https://sdk.minepi.com/pi-sdk.js"></script>
    <script>Pi.init({ version: "2.0", sandbox: true })</script>

    <script>
        window.piAuthenticate = (instance, scopes, callbackMethod) => {

            // Execute function that will do the actual job
            return Pi.authenticate(scopes, result => {
                // Invoke the C# callback method passing the result as parameter
                instance.invokeMethodAsync(callbackMethod, result);
            });

        };

        window.piCreatePayment = (instance, paymentData) => {

            Pi.createPayment(paymentData,{
                onReadyForServerApproval: function(paymentId) {instance.invokeMethodAsync("serverApproval",paymentId)},
                onReadyForServerCompletion: function(paymentId,txid) {instance.invokeMethodAsync("serverCompletion",paymentId,txid)},
                onCancel:function(paymentId) {instance.invokeMethodAsync("cancel",paymentId)},
                onError: function(error,payment) {instance.invokeMethodAsync("error",error,payment)}
                });
        };

        
    </script>
</body>

</html>
